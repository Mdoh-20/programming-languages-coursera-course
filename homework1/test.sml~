(* myprogram.sml *)
fun is_older (x:int*int*int,y:int*int*int)=if (365* #1 x + 30 * #2 x+ #3 x)<(365* #1 y + 30 * #2 y+ #3 y)
					   then true
					   else false
						    
val older=is_older((1,2,3),(2,3,4))

		  (* second*)
fun number_in_month (xs:(int*int*int) list ,y:int)=
    if null xs
    then 0
    else if #2 (hd xs)= y
    then (1+ number_in_month (tl xs,y))
    else (0+ number_in_month (tl xs,y))
val test2 = number_in_month ([(2012,2,8),(2013,0,5)],2)
			    (* Third*)
fun number_in_months (x:(int*int*int)list,y:int list)=
    if null y
    then 0
    else number_in_month (x,hd y)+ number_in_months(x, tl y)
val test3=number_in_months([(2012,3,1),(2013,4,1),(2012,3,1)],[3,4])
fun dates_in_month (xs:(int*int*int) list,y:int)=
    if null xs
    then []
    else if #2(hd xs) = y
    then hd xs:: dates_in_month (tl xs,y)
    else dates_in_month (tl xs,y)

val test4= dates_in_month ([(2012,3,4),(2013,1,1),(2014,3,4)],3)
fun dates_in_months (xs:(int*int*int)list ,ys:int list)=
    if null ys
    then []
    else dates_in_month(xs, hd ys)::dates_in_months(xs,tl ys)
val test5=dates_in_months([(2012,3,4),(2013,1,4),(2014,1,4),(2014,4,4)],[1,3])
			 (*get nth element *)
fun get_nth (xs:string list ,y:int)=
    if y=1
    then hd xs
    else get_nth (tl xs ,y-1)
val test6 = get_nth (["a","b","c"],2)
(* date to string*)
val months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
fun getMonth (x:int)= get_nth(months,x)
fun date_to_string (x:(int*int*int))=getMonth(#2 x)^Int.toString(#3 x)^ ", " ^Int.toString(#1 x)
							      
val test7=date_to_string((2012,3,10))
			
fun number_before_reaching_sum (xs:int list,sum:int,n:int)=
    if sum - hd xs <0
    then n
    else number_before_reaching_sum (tl xs,sum- hd xs,n+1)

val test8= number_before_reaching_sum ([1,2,3],4,0)
				      
(*what month*)
val days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
				      
fun what_month (day:int)=
    number_before_reaching_sum (days_in_months,day,0)

val test9 = what_month(360)
		      
		      (* month_range *)
fun month_range (day1:int, day2:int)=
    if day1>day2
    then []
    else what_month(day1)::month_range(day1+1,day2)
val test10=month_range(28,36)
		      
		      (*oldes*)

fun oldest(xs:(int*int*int)list,old:(int*int*int))=
    if null xs
    then old
    else if (#1(hd xs))*365+ (#2(hd xs))*30 + #3 (hd xs) >(#1 old)*365+(#2 old)*30+(#3 old)								    
    then oldest(tl xs,hd xs)
    else oldest (tl xs,old)

val test11 =oldest([(2011,1,1),(2012,1,1),(2012,3,25)],(0,0,0))
(* problem 12 *)
fun form_list (xs:int list,y:int)=
    if null xs
    then []
    else if hd xs = y
    then form_list (tl xs,y)
    else hd xs::form_list (tl xs ,y)

		     
	
fun remove_duplicate (xs:int list)=
    if null xs
    then []
    else hd xs::remove_duplicate (form_list(tl xs,hd xs))
						   
				  
fun number_in_months_challnage ( xs:(int*int*int)list, ys:int list)=
    number_in_months(xs,remove_duplicate(ys))

fun dates_in_months_challnage (xs:(int*int*int)list,ys:int list)=
    dates_in_months(xs,remove_duplicate(ys))
			      
			       
		  
	
	
				      
				      
	
			  
								  
		    
			 
			  
